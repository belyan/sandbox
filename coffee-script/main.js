// Generated by CoffeeScript 1.12.7
(function() {
  var Person, WebDeveloper, a, action, americanExpress, arr, author, b, book, bool, car, element, event, fn, func, greet, greeting, heredocString, i, index, isReady, j, k, l, len, len1, len2, len3, m, masterCard, message, model, multiLineString, n, name, newRange, normilize, num, num2, o, obj, online, outer, p, pages, primeNumbers, property, q, range, ref, ref1, ref2, ref3, ref4, results, str, type, user, value, visa,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice,
    hasProp = {}.hasOwnProperty,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  console.log("Hello, CoffeeScript!");


  /* Comments */


  /*
  One Line
  Another Line
  Third Line
   */


  /* Numbers */

  a = 10;

  b = 20;

  num = 464;

  num2 = 34636.2343;


  /* Booleans */

  bool = true;

  online = true || false;

  isReady = true || false;


  /* Strings */

  str = "Some string";

  multiLineString = "Some very very very very long string";

  heredocString = "\nMy Text:\n\nLorem ipsum dolor sit amet,\nconsectetur adipisicing elit. Laboriosam consectetur,\nmaiores ea corporis quisquam molestiae dignissimos\nveritatis consequatur, distinctio sapiente voluptatum\npraesentium voluptatibus suscipit quas inventore,\nasperiores quidem necessitatibus officiis.";

  name = "Sorax";

  greeting = "Hello, " + (name.toUpperCase()) + "!";


  /* Arrays */

  arr = [1, 2, 3, 4, 5];

  arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];

  range = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

  range = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

  range = (function() {
    results = [];
    for (j = 0; j <= 25; j++){ results.push(j); }
    return results;
  }).apply(this);

  range.slice(0, 11);

  range.slice(5);

  newRange = range.slice(0);


  /* Objects */

  user = {
    name: "John Doe",
    age: 24,
    status: "Web Developer",
    skills: {
      html: 10,
      css: 9,
      javascript: 6,
      coffeescript: 8
    }
  };


  /* Regular Expressions */

  visa = /^4[0-9]{12}(?:[0-9]{3})?$/;

  masterCard = /^5[1-5][0-9]{14}$/;

  americanExpress = /^3[47][0-9]{13}$/;


  /* Operators */

  first && second;

  true || false;

  first && second;

  true || false;

  !isReady || !isOnline;

  a === b;

  a === 10;

  a !== b;

  a === !b;

  if ((10 < a && a < 20)) {
    update(a);
  }

  ref = [b, a], a = ref[0], b = ref[1];

  ref1 = ["1984", "G.Orwell", 327], book = ref1[0], author = ref1[1], pages = ref1[2];

  car = {
    brand: "Porsche",
    model: "911 Turbo",
    engine: {
      type: "V8",
      hp: 478
    },
    cost: 600000
  };

  model = car.model, (ref2 = car.engine, type = ref2.type);

  user.lastVisit = Date.now();

  "age" in user;

  indexOf.call(range, 14) >= 0;

  country === "Russia" || country === "USA" || country === "UK" || country === "Germany";

  book = 24623;

  if (book) {
    open(book);
  }

  if (book != null) {
    if (typeof open === "function") {
      open(book);
    }
  }

  obj = {};

  if (obj.speed == null) {
    obj.speed = 100;
  }

  obj.speed = obj.speed || 100;

  obj.speed || (obj.speed = 100);

  this.age = config.age || 10;

  this.age = (ref3 = config.age) != null ? ref3 : 10;


  /* Functions */

  greet = function(name) {
    updateSomething();
    "Hello, " + name + "!";
    return changeSomething();
  };

  greet = function(name) {
    if (name) {
      return "hello";
    } else {
      return "goodbye";
    }
  };

  greet = function(name, greeting) {
    if (name == null) {
      name = "Sorax";
    }
    if (greeting == null) {
      greeting = "Bonjour";
    }
    greeting + ", " + name + "!";
  };

  normilize = function() {
    var length, vectors;
    length = arguments[0], vectors = 2 <= arguments.length ? slice.call(arguments, 1) : [];
  };

  outer = 10;

  func = function() {
    var inner;
    outer = 10;
    inner = 10;
  };

  show(update(obj, 10, 20));

  show(update(obj, 10, 20), "fast");

  show();

  show();

  a(+b);

  (function() {
    return something();
  })();


  /* Conditional statements */

  if (isReady) {
    activate(something);
    if (!isFull) {
      append(something);
    }
  } else {
    prepare();
  }

  if (isReady) {
    activate(something);
  }

  if (isReady) {
    activate(something);
  }

  if (!isReady) {
    prepare();
  }

  action = mode === "idle" ? "sleep" : "wander";

  show(message ? message : warning);

  switch (state) {
    case 0:
      message = "request not initialized";
      break;
    case 1:
      message = "server connection established";
      break;
    case 2:
      message = "request received";
      break;
    case 3:
      message = "processing request";
      break;
    case 4:
      message = "request finished and response is ready";
      break;
    default:
      message = "unknown state";
  }

  message = (function() {
    switch (state) {
      case 0:
        return "request not initialized";
      case 1:
        return "server connection established";
      case 2:
        return "request received";
      case 3:
        return "processing request";
      case 4:
        return "request finished and response is ready";
      default:
        return "unknown state";
    }
  })();


  /* Cycles */

  while (isReady) {
    something();
  }

  while (isReady) {
    something();
  }

  while (isReady) {
    something();
  }

  while (!isReady) {
    prepare();
  }

  while (!isReady) {
    prepare();
  }

  for (i = k = 0; k <= 10; i = ++k) {
    update(i);
  }

  for (i = l = 0; l <= 10; i = l += 2) {
    update(i);
  }

  for (i = m = 0; m <= 100; i = ++m) {
    if (isPrime(i)) {
      update(i);
    }
  }

  primeNumbers = (function() {
    var n, results1;
    results1 = [];
    for (i = n = 0; n <= 100; i = ++n) {
      if (isPrime(i)) {
        results1.push(i);
      }
    }
    return results1;
  })();

  for (n = 0, len = array.length; n < len; n++) {
    element = array[n];
    show(element);
  }

  for (o = 0, len1 = array.length; o < len1; o++) {
    element = array[o];
    if (indexOf.call(rightEelements, element) >= 0) {
      show(element);
    }
  }

  for (index = p = 0, len2 = array.length; p < len2; index = ++p) {
    element = array[index];
    if (indexOf.call(rightEelements, element) >= 0) {
      remove(index);
    }
  }

  for (property in obj) {
    value = obj[property];
    console.log(value);
  }

  for (property in obj) {
    if (!hasProp.call(obj, property)) continue;
    value = obj[property];
    console.log(value);
  }

  ref4 = ["click", "mouseover", "mouseout", "focus"];
  fn = function(event) {
    mySuperLibrary.prototype["on" + event] = function(callback) {
      mySuperLibrary.prototype.on(event, callback);
    };
  };
  for (q = 0, len3 = ref4.length; q < len3; q++) {
    event = ref4[q];
    fn(event);
  }


  /* Classes */

  Person = (function() {
    function Person(name, age) {
      this.name = name;
      this.age = age;
    }

    Person.prototype.getInfo = function() {
      return "Name: " + this.name + ", Age: " + this.age;
    };

    Person.myStaticFunc = function() {
      return something();
    };

    Person.myStaticNum = 1234;

    return Person;

  })();

  WebDeveloper = (function(superClass) {
    extend(WebDeveloper, superClass);

    function WebDeveloper() {
      WebDeveloper.__super__.constructor.call(this, 10, 20, 30);
      something();
    }

    WebDeveloper.prototype.getInfo = function() {
      WebDeveloper.__super__.getInfo.call(this, arg1, arg2);
      return "My custom method";
    };

    WebDeveloper.prototype.myMethod = function() {
      return someFunc((function(_this) {
        return function() {
          return process(_this.age);
        };
      })(this));
    };

    return WebDeveloper;

  })(Person);

  Person.prototype.myMethod = function() {
    return say("hi");
  };

}).call(this);
